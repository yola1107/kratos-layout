# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: ""
    version: 0.0.1
paths:
    /helloworld/{name}:
        get:
            tags:
                - Greeter
            description: Sends a greeting
            operationId: Greeter_SayHelloReq
            parameters:
                - name: name
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/helloworld.v1.HelloReply'
    /helloworld2/{name}:
        get:
            tags:
                - Greeter
            operationId: Greeter_SayHello2Req
            parameters:
                - name: name
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/helloworld.v1.Hello2Reply'
    /services:
        get:
            tags:
                - Metadata
            description: ListServices list the full name of all services.
            operationId: Metadata_ListServices
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kratos.api.ListServicesReply'
    /services/{name}:
        get:
            tags:
                - Metadata
            description: GetServiceDesc get the full fileDescriptorSet of service.
            operationId: Metadata_GetServiceDesc
            parameters:
                - name: name
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kratos.api.GetServiceDescReply'
components:
    schemas:
        google.protobuf.DescriptorProto:
            type: object
            properties:
                name:
                    type: string
                field:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.FieldDescriptorProto'
                extension:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.FieldDescriptorProto'
                nestedType:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.DescriptorProto'
                enumType:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.EnumDescriptorProto'
                extensionRange:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.DescriptorProto_ExtensionRange'
                oneofDecl:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.OneofDescriptorProto'
                options:
                    $ref: '#/components/schemas/google.protobuf.MessageOptions'
                reservedRange:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.DescriptorProto_ReservedRange'
                reservedName:
                    type: array
                    items:
                        type: string
                    description: |-
                        Reserved field names, which may not be used by fields in the same message.
                         A given name may only be reserved once.
            description: Describes a message type.
        google.protobuf.DescriptorProto_ExtensionRange:
            type: object
            properties:
                start:
                    type: integer
                    format: int32
                end:
                    type: integer
                    format: int32
                options:
                    $ref: '#/components/schemas/google.protobuf.ExtensionRangeOptions'
        google.protobuf.DescriptorProto_ReservedRange:
            type: object
            properties:
                start:
                    type: integer
                    format: int32
                end:
                    type: integer
                    format: int32
            description: |-
                Range of reserved tag numbers. Reserved tag numbers may not be used by
                 fields or extension ranges in the same message. Reserved ranges may
                 not overlap.
        google.protobuf.EnumDescriptorProto:
            type: object
            properties:
                name:
                    type: string
                value:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.EnumValueDescriptorProto'
                options:
                    $ref: '#/components/schemas/google.protobuf.EnumOptions'
                reservedRange:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.EnumDescriptorProto_EnumReservedRange'
                    description: |-
                        Range of reserved numeric values. Reserved numeric values may not be used
                         by enum values in the same enum declaration. Reserved ranges may not
                         overlap.
                reservedName:
                    type: array
                    items:
                        type: string
                    description: |-
                        Reserved enum value names, which may not be reused. A given name may only
                         be reserved once.
            description: Describes an enum type.
        google.protobuf.EnumDescriptorProto_EnumReservedRange:
            type: object
            properties:
                start:
                    type: integer
                    format: int32
                end:
                    type: integer
                    format: int32
            description: |-
                Range of reserved numeric values. Reserved values may not be used by
                 entries in the same enum. Reserved ranges may not overlap.

                 Note that this is distinct from DescriptorProto.ReservedRange in that it
                 is inclusive such that it can appropriately represent the entire int32
                 domain.
        google.protobuf.EnumOptions:
            type: object
            properties:
                allowAlias:
                    type: boolean
                    description: |-
                        Set this option to true to allow mapping different tag names to the same
                         value.
                deprecated:
                    type: boolean
                    description: |-
                        Is this enum deprecated?
                         Depending on the target platform, this can emit Deprecated annotations
                         for the enum, or it will be completely ignored; in the very least, this
                         is a formalization for deprecating enums.
                uninterpretedOption:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.UninterpretedOption'
                    description: The parser stores options it doesn't recognize here. See above.
        google.protobuf.EnumValueDescriptorProto:
            type: object
            properties:
                name:
                    type: string
                number:
                    type: integer
                    format: int32
                options:
                    $ref: '#/components/schemas/google.protobuf.EnumValueOptions'
            description: Describes a value within an enum.
        google.protobuf.EnumValueOptions:
            type: object
            properties:
                deprecated:
                    type: boolean
                    description: |-
                        Is this enum value deprecated?
                         Depending on the target platform, this can emit Deprecated annotations
                         for the enum value, or it will be completely ignored; in the very least,
                         this is a formalization for deprecating enum values.
                uninterpretedOption:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.UninterpretedOption'
                    description: The parser stores options it doesn't recognize here. See above.
        google.protobuf.ExtensionRangeOptions:
            type: object
            properties:
                uninterpretedOption:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.UninterpretedOption'
                    description: The parser stores options it doesn't recognize here. See above.
        google.protobuf.FieldDescriptorProto:
            type: object
            properties:
                name:
                    type: string
                number:
                    type: integer
                    format: int32
                label:
                    type: integer
                    format: enum
                type:
                    type: integer
                    description: |-
                        If type_name is set, this need not be set.  If both this and type_name
                         are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
                    format: enum
                typeName:
                    type: string
                    description: |-
                        For message and enum types, this is the name of the type.  If the name
                         starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
                         rules are used to find the type (i.e. first the nested types within this
                         message are searched, then within the parent, on up to the root
                         namespace).
                extendee:
                    type: string
                    description: |-
                        For extensions, this is the name of the type being extended.  It is
                         resolved in the same manner as type_name.
                defaultValue:
                    type: string
                    description: |-
                        For numeric types, contains the original text representation of the value.
                         For booleans, "true" or "false".
                         For strings, contains the default text contents (not escaped in any way).
                         For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
                oneofIndex:
                    type: integer
                    description: |-
                        If set, gives the index of a oneof in the containing type's oneof_decl
                         list.  This field is a member of that oneof.
                    format: int32
                jsonName:
                    type: string
                    description: |-
                        JSON name of this field. The value is set by protocol compiler. If the
                         user has set a "json_name" option on this field, that option's value
                         will be used. Otherwise, it's deduced from the field's name by converting
                         it to camelCase.
                options:
                    $ref: '#/components/schemas/google.protobuf.FieldOptions'
                proto3Optional:
                    type: boolean
                    description: |-
                        If true, this is a proto3 "optional". When a proto3 field is optional, it
                         tracks presence regardless of field type.

                         When proto3_optional is true, this field must be belong to a oneof to
                         signal to old proto3 clients that presence is tracked for this field. This
                         oneof is known as a "synthetic" oneof, and this field must be its sole
                         member (each proto3 optional field gets its own synthetic oneof). Synthetic
                         oneofs exist in the descriptor only, and do not generate any API. Synthetic
                         oneofs must be ordered after all "real" oneofs.

                         For message fields, proto3_optional doesn't create any semantic change,
                         since non-repeated message fields always track presence. However it still
                         indicates the semantic detail of whether the user wrote "optional" or not.
                         This can be useful for round-tripping the .proto file. For consistency we
                         give message fields a synthetic oneof also, even though it is not required
                         to track presence. This is especially important because the parser can't
                         tell if a field is a message or an enum, so it must always create a
                         synthetic oneof.

                         Proto2 optional fields do not set this flag, because they already indicate
                         optional with `LABEL_OPTIONAL`.
            description: Describes a field within a message.
        google.protobuf.FieldOptions:
            type: object
            properties:
                ctype:
                    type: integer
                    description: |-
                        The ctype option instructs the C++ code generator to use a different
                         representation of the field than it normally would.  See the specific
                         options below.  This option is not yet implemented in the open source
                         release -- sorry, we'll try to include it in a future version!
                    format: enum
                packed:
                    type: boolean
                    description: |-
                        The packed option can be enabled for repeated primitive fields to enable
                         a more efficient representation on the wire. Rather than repeatedly
                         writing the tag and type for each element, the entire array is encoded as
                         a single length-delimited blob. In proto3, only explicit setting it to
                         false will avoid using packed encoding.
                jstype:
                    type: integer
                    description: |-
                        The jstype option determines the JavaScript type used for values of the
                         field.  The option is permitted only for 64 bit integral and fixed types
                         (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
                         is represented as JavaScript string, which avoids loss of precision that
                         can happen when a large value is converted to a floating point JavaScript.
                         Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
                         use the JavaScript "number" type.  The behavior of the default option
                         JS_NORMAL is implementation dependent.

                         This option is an enum to permit additional types to be added, e.g.
                         goog.math.Integer.
                    format: enum
                lazy:
                    type: boolean
                    description: |-
                        Should this field be parsed lazily?  Lazy applies only to message-type
                         fields.  It means that when the outer message is initially parsed, the
                         inner message's contents will not be parsed but instead stored in encoded
                         form.  The inner message will actually be parsed when it is first accessed.

                         This is only a hint.  Implementations are free to choose whether to use
                         eager or lazy parsing regardless of the value of this option.  However,
                         setting this option true suggests that the protocol author believes that
                         using lazy parsing on this field is worth the additional bookkeeping
                         overhead typically needed to implement it.

                         This option does not affect the public interface of any generated code;
                         all method signatures remain the same.  Furthermore, thread-safety of the
                         interface is not affected by this option; const methods remain safe to
                         call from multiple threads concurrently, while non-const methods continue
                         to require exclusive access.


                         Note that implementations may choose not to check required fields within
                         a lazy sub-message.  That is, calling IsInitialized() on the outer message
                         may return true even if the inner message has missing required fields.
                         This is necessary because otherwise the inner message would have to be
                         parsed in order to perform the check, defeating the purpose of lazy
                         parsing.  An implementation which chooses not to check required fields
                         must be consistent about it.  That is, for any particular sub-message, the
                         implementation must either *always* check its required fields, or *never*
                         check its required fields, regardless of whether or not the message has
                         been parsed.

                         As of 2021, lazy does no correctness checks on the byte stream during
                         parsing.  This may lead to crashes if and when an invalid byte stream is
                         finally parsed upon access.

                         TODO(b/211906113):  Enable validation on lazy fields.
                unverifiedLazy:
                    type: boolean
                    description: |-
                        unverified_lazy does no correctness checks on the byte stream. This should
                         only be used where lazy with verification is prohibitive for performance
                         reasons.
                deprecated:
                    type: boolean
                    description: |-
                        Is this field deprecated?
                         Depending on the target platform, this can emit Deprecated annotations
                         for accessors, or it will be completely ignored; in the very least, this
                         is a formalization for deprecating fields.
                weak:
                    type: boolean
                    description: For Google-internal migration only. Do not use.
                uninterpretedOption:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.UninterpretedOption'
                    description: The parser stores options it doesn't recognize here. See above.
        google.protobuf.FileDescriptorProto:
            type: object
            properties:
                name:
                    type: string
                package:
                    type: string
                dependency:
                    type: array
                    items:
                        type: string
                    description: Names of files imported by this file.
                publicDependency:
                    type: array
                    items:
                        type: integer
                        format: int32
                    description: Indexes of the public imported files in the dependency list above.
                weakDependency:
                    type: array
                    items:
                        type: integer
                        format: int32
                    description: |-
                        Indexes of the weak imported files in the dependency list.
                         For Google-internal migration only. Do not use.
                messageType:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.DescriptorProto'
                    description: All top-level definitions in this file.
                enumType:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.EnumDescriptorProto'
                service:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.ServiceDescriptorProto'
                extension:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.FieldDescriptorProto'
                options:
                    $ref: '#/components/schemas/google.protobuf.FileOptions'
                sourceCodeInfo:
                    allOf:
                        - $ref: '#/components/schemas/google.protobuf.SourceCodeInfo'
                    description: |-
                        This field contains optional information about the original source code.
                         You may safely remove this entire field without harming runtime
                         functionality of the descriptors -- the information is needed only by
                         development tools.
                syntax:
                    type: string
                    description: |-
                        The syntax of the proto file.
                         The supported values are "proto2" and "proto3".
            description: Describes a complete .proto file.
        google.protobuf.FileDescriptorSet:
            type: object
            properties:
                file:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.FileDescriptorProto'
            description: |-
                The protocol compiler can output a FileDescriptorSet containing the .proto
                 files it parses.
        google.protobuf.FileOptions:
            type: object
            properties:
                javaPackage:
                    type: string
                    description: |-
                        Sets the Java package where classes generated from this .proto will be
                         placed.  By default, the proto package is used, but this is often
                         inappropriate because proto packages do not normally start with backwards
                         domain names.
                javaOuterClassname:
                    type: string
                    description: |-
                        Controls the name of the wrapper Java class generated for the .proto file.
                         That class will always contain the .proto file's getDescriptor() method as
                         well as any top-level extensions defined in the .proto file.
                         If java_multiple_files is disabled, then all the other classes from the
                         .proto file will be nested inside the single wrapper outer class.
                javaMultipleFiles:
                    type: boolean
                    description: |-
                        If enabled, then the Java code generator will generate a separate .java
                         file for each top-level message, enum, and service defined in the .proto
                         file.  Thus, these types will *not* be nested inside the wrapper class
                         named by java_outer_classname.  However, the wrapper class will still be
                         generated to contain the file's getDescriptor() method as well as any
                         top-level extensions defined in the file.
                javaGenerateEqualsAndHash:
                    type: boolean
                    description: This option does nothing.
                javaStringCheckUtf8:
                    type: boolean
                    description: |-
                        If set true, then the Java2 code generator will generate code that
                         throws an exception whenever an attempt is made to assign a non-UTF-8
                         byte sequence to a string field.
                         Message reflection will do the same.
                         However, an extension field still accepts non-UTF-8 byte sequences.
                         This option has no effect on when used with the lite runtime.
                optimizeFor:
                    type: integer
                    format: enum
                goPackage:
                    type: string
                    description: |-
                        Sets the Go package where structs generated from this .proto will be
                         placed. If omitted, the Go package will be derived from the following:
                           - The basename of the package import path, if provided.
                           - Otherwise, the package statement in the .proto file, if present.
                           - Otherwise, the basename of the .proto file, without extension.
                ccGenericServices:
                    type: boolean
                    description: |-
                        Should generic services be generated in each language?  "Generic" services
                         are not specific to any particular RPC system.  They are generated by the
                         main code generators in each language (without additional plugins).
                         Generic services were the only kind of service generation supported by
                         early versions of google.protobuf.

                         Generic services are now considered deprecated in favor of using plugins
                         that generate code specific to your particular RPC system.  Therefore,
                         these default to false.  Old code which depends on generic services should
                         explicitly set them to true.
                javaGenericServices:
                    type: boolean
                pyGenericServices:
                    type: boolean
                phpGenericServices:
                    type: boolean
                deprecated:
                    type: boolean
                    description: |-
                        Is this file deprecated?
                         Depending on the target platform, this can emit Deprecated annotations
                         for everything in the file, or it will be completely ignored; in the very
                         least, this is a formalization for deprecating files.
                ccEnableArenas:
                    type: boolean
                    description: |-
                        Enables the use of arenas for the proto messages in this file. This applies
                         only to generated classes for C++.
                objcClassPrefix:
                    type: string
                    description: |-
                        Sets the objective c class prefix which is prepended to all objective c
                         generated classes from this .proto. There is no default.
                csharpNamespace:
                    type: string
                    description: Namespace for generated classes; defaults to the package.
                swiftPrefix:
                    type: string
                    description: |-
                        By default Swift generators will take the proto package and CamelCase it
                         replacing '.' with underscore and use that to prefix the types/symbols
                         defined. When this options is provided, they will use this value instead
                         to prefix the types/symbols defined.
                phpClassPrefix:
                    type: string
                    description: |-
                        Sets the php class prefix which is prepended to all php generated classes
                         from this .proto. Default is empty.
                phpNamespace:
                    type: string
                    description: |-
                        Use this option to change the namespace of php generated classes. Default
                         is empty. When this option is empty, the package name will be used for
                         determining the namespace.
                phpMetadataNamespace:
                    type: string
                    description: |-
                        Use this option to change the namespace of php generated metadata classes.
                         Default is empty. When this option is empty, the proto file name will be
                         used for determining the namespace.
                rubyPackage:
                    type: string
                    description: |-
                        Use this option to change the package of ruby generated classes. Default
                         is empty. When this option is not set, the package name will be used for
                         determining the ruby package.
                uninterpretedOption:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.UninterpretedOption'
                    description: |-
                        The parser stores options it doesn't recognize here.
                         See the documentation for the "Options" section above.
        google.protobuf.MessageOptions:
            type: object
            properties:
                messageSetWireFormat:
                    type: boolean
                    description: |-
                        Set true to use the old proto1 MessageSet wire format for extensions.
                         This is provided for backwards-compatibility with the MessageSet wire
                         format.  You should not use this for any other reason:  It's less
                         efficient, has fewer features, and is more complicated.

                         The message must be defined exactly as follows:
                           message Foo {
                             option message_set_wire_format = true;
                             extensions 4 to max;
                           }
                         Note that the message cannot have any defined fields; MessageSets only
                         have extensions.

                         All extensions of your type must be singular messages; e.g. they cannot
                         be int32s, enums, or repeated messages.

                         Because this is an option, the above two restrictions are not enforced by
                         the protocol compiler.
                noStandardDescriptorAccessor:
                    type: boolean
                    description: |-
                        Disables the generation of the standard "descriptor()" accessor, which can
                         conflict with a field of the same name.  This is meant to make migration
                         from proto1 easier; new code should avoid fields named "descriptor".
                deprecated:
                    type: boolean
                    description: |-
                        Is this message deprecated?
                         Depending on the target platform, this can emit Deprecated annotations
                         for the message, or it will be completely ignored; in the very least,
                         this is a formalization for deprecating messages.
                mapEntry:
                    type: boolean
                    description: |-
                        Whether the message is an automatically generated map entry type for the
                         maps field.

                         For maps fields:
                             map<KeyType, ValueType> map_field = 1;
                         The parsed descriptor looks like:
                             message MapFieldEntry {
                                 option map_entry = true;
                                 optional KeyType key = 1;
                                 optional ValueType value = 2;
                             }
                             repeated MapFieldEntry map_field = 1;

                         Implementations may choose not to generate the map_entry=true message, but
                         use a native map in the target language to hold the keys and values.
                         The reflection APIs in such implementations still need to work as
                         if the field is a repeated message field.

                         NOTE: Do not set the option in .proto files. Always use the maps syntax
                         instead. The option should only be implicitly set by the proto compiler
                         parser.
                uninterpretedOption:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.UninterpretedOption'
                    description: The parser stores options it doesn't recognize here. See above.
        google.protobuf.MethodDescriptorProto:
            type: object
            properties:
                name:
                    type: string
                inputType:
                    type: string
                    description: |-
                        Input and output type names.  These are resolved in the same way as
                         FieldDescriptorProto.type_name, but must refer to a message type.
                outputType:
                    type: string
                options:
                    $ref: '#/components/schemas/google.protobuf.MethodOptions'
                clientStreaming:
                    type: boolean
                    description: Identifies if client streams multiple client messages
                serverStreaming:
                    type: boolean
                    description: Identifies if server streams multiple server messages
            description: Describes a method of a service.
        google.protobuf.MethodOptions:
            type: object
            properties:
                deprecated:
                    type: boolean
                    description: |-
                        Is this method deprecated?
                         Depending on the target platform, this can emit Deprecated annotations
                         for the method, or it will be completely ignored; in the very least,
                         this is a formalization for deprecating methods.
                idempotencyLevel:
                    type: integer
                    format: enum
                uninterpretedOption:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.UninterpretedOption'
                    description: The parser stores options it doesn't recognize here. See above.
        google.protobuf.OneofDescriptorProto:
            type: object
            properties:
                name:
                    type: string
                options:
                    $ref: '#/components/schemas/google.protobuf.OneofOptions'
            description: Describes a oneof.
        google.protobuf.OneofOptions:
            type: object
            properties:
                uninterpretedOption:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.UninterpretedOption'
                    description: The parser stores options it doesn't recognize here. See above.
        google.protobuf.ServiceDescriptorProto:
            type: object
            properties:
                name:
                    type: string
                method:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.MethodDescriptorProto'
                options:
                    $ref: '#/components/schemas/google.protobuf.ServiceOptions'
            description: Describes a service.
        google.protobuf.ServiceOptions:
            type: object
            properties:
                deprecated:
                    type: boolean
                    description: |-
                        Is this service deprecated?
                         Depending on the target platform, this can emit Deprecated annotations
                         for the service, or it will be completely ignored; in the very least,
                         this is a formalization for deprecating services.
                uninterpretedOption:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.UninterpretedOption'
                    description: The parser stores options it doesn't recognize here. See above.
        google.protobuf.SourceCodeInfo:
            type: object
            properties:
                location:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.SourceCodeInfo_Location'
                    description: |-
                        A Location identifies a piece of source code in a .proto file which
                         corresponds to a particular definition.  This information is intended
                         to be useful to IDEs, code indexers, documentation generators, and similar
                         tools.

                         For example, say we have a file like:
                           message Foo {
                             optional string foo = 1;
                           }
                         Let's look at just the field definition:
                           optional string foo = 1;
                           ^       ^^     ^^  ^  ^^^
                           a       bc     de  f  ghi
                         We have the following locations:
                           span   path               represents
                           [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
                           [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
                           [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
                           [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
                           [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).

                         Notes:
                         - A location may refer to a repeated field itself (i.e. not to any
                           particular index within it).  This is used whenever a set of elements are
                           logically enclosed in a single code segment.  For example, an entire
                           extend block (possibly containing multiple extension definitions) will
                           have an outer location whose path refers to the "extensions" repeated
                           field without an index.
                         - Multiple locations may have the same path.  This happens when a single
                           logical declaration is spread out across multiple places.  The most
                           obvious example is the "extend" block again -- there may be multiple
                           extend blocks in the same scope, each of which will have the same path.
                         - A location's span is not always a subset of its parent's span.  For
                           example, the "extendee" of an extension declaration appears at the
                           beginning of the "extend" block and is shared by all extensions within
                           the block.
                         - Just because a location's span is a subset of some other location's span
                           does not mean that it is a descendant.  For example, a "group" defines
                           both a type and a field in a single declaration.  Thus, the locations
                           corresponding to the type and field and their components will overlap.
                         - Code which tries to interpret locations should probably be designed to
                           ignore those that it doesn't understand, as more types of locations could
                           be recorded in the future.
            description: |-
                Encapsulates information about the original source file from which a
                 FileDescriptorProto was generated.
        google.protobuf.SourceCodeInfo_Location:
            type: object
            properties:
                path:
                    type: array
                    items:
                        type: integer
                        format: int32
                    description: |-
                        Identifies which part of the FileDescriptorProto was defined at this
                         location.

                         Each element is a field number or an index.  They form a path from
                         the root FileDescriptorProto to the place where the definition occurs.
                         For example, this path:
                           [ 4, 3, 2, 7, 1 ]
                         refers to:
                           file.message_type(3)  // 4, 3
                               .field(7)         // 2, 7
                               .name()           // 1
                         This is because FileDescriptorProto.message_type has field number 4:
                           repeated DescriptorProto message_type = 4;
                         and DescriptorProto.field has field number 2:
                           repeated FieldDescriptorProto field = 2;
                         and FieldDescriptorProto.name has field number 1:
                           optional string name = 1;

                         Thus, the above path gives the location of a field name.  If we removed
                         the last element:
                           [ 4, 3, 2, 7 ]
                         this path refers to the whole field declaration (from the beginning
                         of the label to the terminating semicolon).
                span:
                    type: array
                    items:
                        type: integer
                        format: int32
                    description: |-
                        Always has exactly three or four elements: start line, start column,
                         end line (optional, otherwise assumed same as start line), end column.
                         These are packed into a single field for efficiency.  Note that line
                         and column numbers are zero-based -- typically you will want to add
                         1 to each before displaying to a user.
                leadingComments:
                    type: string
                    description: |-
                        If this SourceCodeInfo represents a complete declaration, these are any
                         comments appearing before and after the declaration which appear to be
                         attached to the declaration.

                         A series of line comments appearing on consecutive lines, with no other
                         tokens appearing on those lines, will be treated as a single comment.

                         leading_detached_comments will keep paragraphs of comments that appear
                         before (but not connected to) the current element. Each paragraph,
                         separated by empty lines, will be one comment element in the repeated
                         field.

                         Only the comment content is provided; comment markers (e.g. //) are
                         stripped out.  For block comments, leading whitespace and an asterisk
                         will be stripped from the beginning of each line other than the first.
                         Newlines are included in the output.

                         Examples:

                           optional int32 foo = 1;  // Comment attached to foo.
                           // Comment attached to bar.
                           optional int32 bar = 2;

                           optional string baz = 3;
                           // Comment attached to baz.
                           // Another line attached to baz.

                           // Comment attached to qux.
                           //
                           // Another line attached to qux.
                           optional double qux = 4;

                           // Detached comment for corge. This is not leading or trailing comments
                           // to qux or corge because there are blank lines separating it from
                           // both.

                           // Detached comment for corge paragraph 2.

                           optional string corge = 5;
                           /* Block comment attached
                            * to corge.  Leading asterisks
                            * will be removed. */
                           /* Block comment attached to
                            * grault. */
                           optional int32 grault = 6;

                           // ignored detached comments.
                trailingComments:
                    type: string
                leadingDetachedComments:
                    type: array
                    items:
                        type: string
        google.protobuf.UninterpretedOption:
            type: object
            properties:
                name:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.UninterpretedOption_NamePart'
                identifierValue:
                    type: string
                    description: |-
                        The value of the uninterpreted option, in whatever type the tokenizer
                         identified it as during parsing. Exactly one of these should be set.
                positiveIntValue:
                    type: string
                negativeIntValue:
                    type: string
                doubleValue:
                    type: number
                    format: double
                stringValue:
                    type: string
                    format: bytes
                aggregateValue:
                    type: string
            description: |-
                A message representing a option the parser does not recognize. This only
                 appears in options protos created by the compiler::Parser class.
                 DescriptorPool resolves these when building Descriptor objects. Therefore,
                 options protos in descriptor objects (e.g. returned by Descriptor::options(),
                 or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
                 in them.
        google.protobuf.UninterpretedOption_NamePart:
            type: object
            properties:
                namePart:
                    type: string
                isExtension:
                    type: boolean
            description: |-
                The name of the uninterpreted option.  Each string represents a segment in
                 a dot-separated name.  is_extension is true iff a segment represents an
                 extension (denoted with parentheses in options specs in .proto files).
                 E.g.,{ ["foo", false], ["bar.baz", true], ["qux", false] } represents
                 "foo.(bar.baz).qux".
        helloworld.v1.Hello2Reply:
            type: object
            properties:
                message:
                    type: string
            description: The response message containing the greetings
        helloworld.v1.HelloReply:
            type: object
            properties:
                message:
                    type: string
            description: The response message containing the greetings
        kratos.api.GetServiceDescReply:
            type: object
            properties:
                fileDescSet:
                    $ref: '#/components/schemas/google.protobuf.FileDescriptorSet'
        kratos.api.ListServicesReply:
            type: object
            properties:
                services:
                    type: array
                    items:
                        type: string
                methods:
                    type: array
                    items:
                        type: string
tags:
    - name: Greeter
      description: The greeting service definition.
    - name: Metadata
      description: Metadata is api definition metadata service.
