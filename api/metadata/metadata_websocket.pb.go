// Code generated by protoc-gen-go-websocket. DO NOT EDIT.
// versions:
// - protoc-gen-go-websocket v2.8.3
// - protoc            v3.6.1
// source: metadata/metadata.proto

package metadata

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"context"

	"github.com/yola1107/kratos/v2/library/task"
	"github.com/yola1107/kratos/v2/transport/websocket"

	"google.golang.org/protobuf/proto"
)

var websocketLoopIns *task.Loop

func GetLoop() *task.Loop   { return websocketLoopIns }
func setLoop(lp *task.Loop) { websocketLoopIns = lp }

// MetadataWebsocketServer is the server API for Metadata service.
type MetadataWebsocketServer interface {
	IsLoopFunc(f string) (isLoop bool)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesReply, error)
	GetServiceDesc(context.Context, *GetServiceDescRequest) (*GetServiceDescReply, error)
}

func RegisterMetadataWebsocketServer(s *websocket.Server, srv MetadataWebsocketServer) {
	setLoop(s.GetLoop())
	s.RegisterService(&Metadata_Websocket_ServiceDesc, srv)
}

func _Metadata_ListServices_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(ListServicesRequest)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(MetadataWebsocketServer).ListServices(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kratos.api.Metadata/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out := new(ListServicesReply)
		var err error
		if srv.(MetadataWebsocketServer).IsLoopFunc("ListServices") {
			rspChan := make(chan *ListServicesReply)
			errChan := make(chan error)
			websocketLoopIns.Post(func() {
				resp, err := srv.(MetadataWebsocketServer).ListServices(ctx, req.(*ListServicesRequest))
				rspChan <- resp
				errChan <- err
			})
			out = <-rspChan
			err = <-errChan
		} else {
			out, err = srv.(MetadataWebsocketServer).ListServices(ctx, req.(*ListServicesRequest))
		}
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetServiceDesc_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(GetServiceDescRequest)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		out, err := srv.(MetadataWebsocketServer).GetServiceDesc(ctx, in)
		data, _ := proto.Marshal(out)
		return data, err
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kratos.api.Metadata/GetServiceDesc",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		out := new(GetServiceDescReply)
		var err error
		if srv.(MetadataWebsocketServer).IsLoopFunc("GetServiceDesc") {
			rspChan := make(chan *GetServiceDescReply)
			errChan := make(chan error)
			websocketLoopIns.Post(func() {
				resp, err := srv.(MetadataWebsocketServer).GetServiceDesc(ctx, req.(*GetServiceDescRequest))
				rspChan <- resp
				errChan <- err
			})
			out = <-rspChan
			err = <-errChan
		} else {
			out, err = srv.(MetadataWebsocketServer).GetServiceDesc(ctx, req.(*GetServiceDescRequest))
		}
		if out != nil {
			data, _ := proto.Marshal(out)
			return data, err
		}
		return nil, err
	}
	return interceptor(ctx, in, info, handler)
}

var Metadata_Websocket_ServiceDesc = websocket.ServiceDesc{
	ServiceName: "kratos.api.Metadata",
	HandlerType: (*MetadataWebsocketServer)(nil),
	Methods: []websocket.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _Metadata_ListServices_Websocket_Handler,
			Ops:        1001,
		},
		{
			MethodName: "GetServiceDesc",
			Handler:    _Metadata_GetServiceDesc_Websocket_Handler,
			Ops:        1003,
		},
	},
}
